Actually when we try to write anything to the file , node actually convert that data into buffer if the type of the data provided is not a buffer , so internally the sys calls that node make converts the data into 0s and 1s

How writeable streams work internally ?
-- every writable stream maintains an internal buffer , and when we write data to the stream , it writes that data to the internal buffer ,when the back-pressure is hit then the stream starts flushing the data , as soon as there is space available 'drain' event is triggered , and when the 'drain' event is hit , then the stream starts writing the data from the internal buffer to the file , and when the internal buffer is empty , then the stream starts writing the data from the chunk to the internal buffer .

# highWaterMark sets the threshold for when back-pressure is applied, and exceeding it without handling 'drain' can lead to memory issues.

What happens when in writeable streams we don't care of highWaterMark ?
-- Say during the write operation in streams , we didn't stop during the back-pressure then automatically the size of our internal buffer starts increasing , leading to memory issues , which is a very bad practice , we should actually wait until the 'drain' event has not been hit .

# write and read --> more granular control
# writeFile and readFile --> less granular control